---
title: "Get Started"
---

## Is Positron for me?

:::{.callout-note}
Positron is an early stage project under active development. We don't expect it to be the best fit for everyone doing data science right away.
:::

#### Positron might be a good fit for you today if...

* you use VS Code for data science (Python or R) but wish it included more affordances for data-specific work like a dedicated console, variables pane, data explorer, and ways to interact with your plots.
* you use Jupyterlab for data science (Python or R) and are ready for a more powerful, fully-featured IDE.
* you use RStudio and want more ability to customize or extend your IDE.
* you use additional languages beyond only Python or R in your day-to-day data science or package development work, like Rust, C++, JavaScript, or Lua.

#### Positron might _not_ be a good fit for you today if...

* you need stable, polished software, as Positron is still in beta and some features are unstable or unfinished.
* you need all the features of the RStudio IDE, as Positron doesn’t have all RStudio’s features; some notable absences are inline output for Quarto and R Markdown, profiling, Sweave, RStudio Add-In support, etc.

## Machine prerequisites

Before installing Positron, ensure your Python and/or R environments are ready to work with Positron. You don't need to install both, but Positron doesn't bundle either Python or R.

### Windows prerequisites

If you're using Windows, make sure you have the [latest Visual C++ Redistributable](https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#latest-microsoft-visual-c-redistributable-version) installed. 

### Python prerequisites

Positron works with [actively supported versions](https://devguide.python.org/versions/#versions) of Python, from 3.8 to Python 3.12. We recommend [pyenv](https://github.com/pyenv/pyenv) and [pyenv for Windows](https://github.com/pyenv-win/pyenv-win) for managing Python versions.

Positron communicates with Python via the IPykernel package, so it needs to be installed for the Python environment you want to use with Positron. If you are managing your Python project using a tool like venv or conda, add `ipykernel` to your `requirements.txt` file. You can install IPykernel manually as follows:

``` bash
python3 -m pip install ipykernel
```

Alternatively, Positron will prompt you to install the IPykernel package if it'sn't found when you first try to use a Python environment.

### R prerequisites

Positron requires R 4.2 or higher. To install R, follow the instructions for your operating system at <https://cloud.r-project.org/>.

Alternatively, if you'd like to have multiple R installations, [rig](https://github.com/r-lib/rig) is a great tool to manage this which works well with Positron.

If you're an R package developer, you will also want to make sure that you have the current versions of certain R packages, all of which had recent updates to make them work more smoothly in Positron. Run one of the code snippets below to ensure that you are up-to-date:

``` r
# if you're a pak person (we are!)
pak::pak(c("usethis", "cli", "crayon", "rlang", "roxygen2", "pkgload"))

# or using base R
install.packages(c("usethis", "cli", "crayon", "rlang", "roxygen2", "pkgload"))
```

## Installing Positron

Install Positron from our [Releases](https://github.com/posit-dev/positron/releases) page on GitHub. 

Currently, Positron is producing beta release builds from a continuous integration (CI) system for macOS, Windows, and Linux. Release builds are tagged with a version number on our Github repository. Select the release you want to download, then click on **Assets** and download the `.dmg` (for Mac), `.exe` (for Windows), or `.deb` (for Linux) file.

Learn more about [updating Positron](updating.qmd) after you have first installed it.

## Add Positron to your path

You can add Positron to your path via the command _Install 'positron' command in PATH_:

![Add Positron to your path](images/positron-path.png)

After you have executed this command once, Positron will be on your path and then you can use `positron .` in a directory to open Positron in that folder, or `positron foo` to open a folder located at your current path.